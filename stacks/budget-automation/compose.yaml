services:
  budget-automation:
    build: .
    container_name: budget-automation-enhanced
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      PUID: 1000
      PGID: 1000
      TZ: America/Chicago
      PYTHONUNBUFFERED: 1
      PYTHONDONTWRITEBYTECODE: 1
      # YNAB Configuration
      YNAB_API_TOKEN: ${YNAB_API_TOKEN}
      BUDGET_ID: ${BUDGET_ID}
      # Gmail Configuration
      GMAIL_EMAIL: ${GMAIL_EMAIL}
      GMAIL_APP_PASSWORD: ${GMAIL_APP_PASSWORD}
      # Enhanced Features (Optional)
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL:-}
      SPENDING_ALERT_THRESHOLD: ${SPENDING_ALERT_THRESHOLD:-90}
    volumes:
      - ~/docker/appdata/budget-automation/reports:/app/reports
      - ~/docker/appdata/budget-automation/logs:/app/logs
      - ~/docker/appdata/budget-automation/config:/app/config
    command: >
      sh -c "
        echo 'Setting up enhanced budget automation...' &&
        echo '0 9 * * 0 cd /app && python budget_automation.py >> /app/logs/cron.log 2>&1' > /etc/cron.d/budget-cron &&
        echo '0 */6 * * * cd /app && python budget_automation.py --export-only >> /app/logs/export.log 2>&1' >> /etc/cron.d/budget-cron &&
        chmod 0644 /etc/cron.d/budget-cron &&
        crontab /etc/cron.d/budget-cron &&
        echo 'Starting cron daemon with enhanced features...' &&
        cron -f
      "
    networks:
      - web
    healthcheck:
      test: ["CMD", "pgrep", "cron"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  budget-reports:
    image: nginx:alpine
    container_name: budget-reports-enhanced
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      PUID: 1000
      PGID: 1000
      TZ: America/Chicago
    volumes:
      - ~/docker/appdata/budget-automation/reports:/usr/share/nginx/html/reports:ro
      - ~/docker/appdata/budget-automation/logs:/usr/share/nginx/html/logs:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./enhanced_dashboard.html:/usr/share/nginx/html/dashboard.html:ro
    depends_on:
      - budget-automation
    networks:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.budget-reports.rule=Host(`budget.lab1830.com`)"
      - "traefik.http.routers.budget-reports.entrypoints=websecure"
      - "traefik.http.routers.budget-reports.tls=true"
      - "traefik.http.services.budget-reports.loadbalancer.server.port=80"
      - "traefik.http.routers.budget-reports.tls.certresolver=letsencrypt"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Budget API service for external integrations
  budget-api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: budget-api
    restart: unless-stopped
    environment:
      TZ: America/Chicago
      PYTHONUNBUFFERED: 1
    volumes:
      - ~/docker/appdata/budget-automation/reports:/app/reports:ro
      - ~/docker/appdata/budget-automation/config:/app/config:ro
    networks:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.budget-api.rule=Host(`budget-api.lab1830.com`)"
      - "traefik.http.routers.budget-api.entrypoints=websecure"
      - "traefik.http.routers.budget-api.tls=true"
      - "traefik.http.services.budget-api.loadbalancer.server.port=8000"
      - "traefik.http.routers.budget-api.tls.certresolver=letsencrypt"
    depends_on:
      - budget-automation

networks:
  web:
    external: true